import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_squared_error
import os


# mesh population
s_time_mesh_pop = {}
t_time_mesh_pop = {}
st_time_mesh_pop = {}
m_time_mesh_pop = {}

# training data

for i in range(1):

    path = '/home/ubuntu/Data/PT_Result/student/training/PT_student_irl_revised.csv'
    with open(path, 'r') as f:

        for line in f:
            line = line.strip('\n')
            tokens = line.split(",")

            if len(tokens)<3:
                continue

            if int(tokens[1]) not in t_time_mesh_pop:

                mesh_pop = {}
                mesh_pop[tokens[2]] = 1
                t_time_mesh_pop[int(tokens[1])] = mesh_pop.copy()
            else:
                if tokens[2] not in t_time_mesh_pop[int(tokens[1])].keys():

                    t_time_mesh_pop[int(tokens[1])][tokens[2]] = 1
                else:
                    temp = t_time_mesh_pop[int(tokens[1])][tokens[2]]
                    t_time_mesh_pop[int(tokens[1])][tokens[2]] = temp + 1

print t_time_mesh_pop.keys()


# synthetic data

for i in range(1):

    with open("/home/ubuntu/Data/PT_Result/sim_result/student_sim/student_sim.csv", 'r') as f:
        for line in f:
            line = line.strip('\n')
            tokens = line.split(",")
            if int(tokens[1]) not in s_time_mesh_pop:
                mesh_pop = {}
                mesh_pop[tokens[2]] = 1
                s_time_mesh_pop[int(tokens[1])] = mesh_pop.copy()
            else:
                if tokens[2] not in s_time_mesh_pop[int(tokens[1])].keys():
                    s_time_mesh_pop[int(tokens[1])][tokens[2]] = 1
                else:
                    temp = s_time_mesh_pop[int(tokens[1])][tokens[2]]
                    s_time_mesh_pop[int(tokens[1])][tokens[2]] = temp + 1


# mesh population correlation
hourly_correlation = []
for t in range(12, 47):
    t_pop = []
    s_pop = []
    if t in t_time_mesh_pop.keys() and t in s_time_mesh_pop.keys():
        for mesh in t_time_mesh_pop[t]:

            t_pop.append(t_time_mesh_pop[t][mesh])

            if mesh in s_time_mesh_pop[t]:
                s_pop.append(s_time_mesh_pop[t][mesh])
            else:
                s_pop.append(0)

        hourly_correlation.append(np.corrcoef(t_pop, s_pop)[0, 1])
        print np.corrcoef(t_pop, s_pop)[0, 1]
print hourly_correlation

xis = range(12,47)
plt.plot(xis, hourly_correlation)
plt.show()
# plt.savefig()


# sample data

for i in range(1):

    path = '/home/ubuntu/Data/all_train_irl.csv'
    count = 0
    with open(path, 'r') as f:
        count+=1
        if count % 700 == 0:
            for line in f:
                line = line.strip('\n')
                tokens = line.split(",")

                if int(tokens[1]) not in st_time_mesh_pop:

                    mesh_pop = {}
                    mesh_pop[tokens[2]] = 1
                    st_time_mesh_pop[int(tokens[1])] = mesh_pop.copy()
                else:
                    if tokens[2] not in st_time_mesh_pop[int(tokens[1])].keys():

                        st_time_mesh_pop[int(tokens[1])][tokens[2]] = 1
                    else:
                        temp = st_time_mesh_pop[int(tokens[1])][tokens[2]]
                        st_time_mesh_pop[int(tokens[1])][tokens[2]] = temp + 1
print st_time_mesh_pop




# markov chain

for i in range(1):

    path = '/home/ubuntu/Data/PT_Result/markov_chain/all_markov.csv'
    with open(path, 'r') as f:

        for line in f:
            line = line.strip('\n')
            tokens = line.split(",")
            if int(tokens[1]) not in m_time_mesh_pop:

                mesh_pop = {}
                mesh_pop[tokens[2]] = 1
                m_time_mesh_pop[int(tokens[1])] = mesh_pop.copy()
            else:
                if tokens[2] not in m_time_mesh_pop[int(tokens[1])].keys():

                    m_time_mesh_pop[int(tokens[1])][tokens[2]] = 1
                else:
                    temp = m_time_mesh_pop[int(tokens[1])][tokens[2]]
                    m_time_mesh_pop[int(tokens[1])][tokens[2]] = temp + 1

print m_time_mesh_pop.keys()



mode = ["vehicle", "train", "walk"]
s_mode_time_count = {}
t_mode_time_count = {}
pt_mode_time_count = {}
for m in mode:
    time_count = {}
    for time in range(12, 48):
        s_mode_time_count[m] = time_count
        s_mode_time_count[m][time] = 0

for m in mode:
    time_count = {}
    for time in range(12, 48):
        t_mode_time_count[m] = time_count
        t_mode_time_count[m][time] = 0

for m in mode:
    time_count = {}
    for time in range(12, 48):
        pt_mode_time_count[m] = time_count
        pt_mode_time_count[m][time] = 0

# count for PT
for i in range(1):
    with open("D:/OpenPFLOW/OpenPFLOWslot.csv", 'r') as f:
        t = 12
        for line in f:
            line = line.strip('\n')
            tokens = line.split(",")
            if tokens[4] != 'stay':
                pt_mode_time_count[tokens[4]][int(tokens[1])] += 1

for m in s_mode_time_count:
    for time in s_mode_time_count[m]:
        pt_mode_time_count[m][time] /= 10000.0

# count for synthetic data
for i in range(50):
    path = 'C:/Users/PangYanbo/Desktop/UbiResult/Synthetic'+str(i)+'.csv'
    with open(path, 'r') as f:
        for line in f:
            line = line.strip('\n')
            tokens = line.split(",")
            if tokens[4] != 'stay':
                if int(tokens[1]) in range(12, 48):
                    s_mode_time_count[tokens[4]][int(tokens[1])] += 1

for m in s_mode_time_count:
    for time in s_mode_time_count[m]:
        s_mode_time_count[m][time] /= 5000.0

# count for training data
for i in range(50):
    path = 'C:/Users/PangYanbo/Desktop/UbiResult/TrainingTrajectoriesGroup_'+str(i)+'.csv'
    with open(path, 'r') as f:
        for line in f:
            line = line.strip('\n')
            tokens = line.split(",")
            for j in range(3, 152, 3):
                if j < len(tokens):
                    if tokens[j] != 'stay':
                        t_mode_time_count[tokens[j]][int(tokens[0])] += 1

print t_mode_time_count

for m in s_mode_time_count:
    for time in s_mode_time_count[m]:
        t_mode_time_count[m][time] /= 10000.0

x = range(12, 48)

fig,ax = plt.subplots()

sum = np.array(pt_mode_time_count['train'].values())+np.array(pt_mode_time_count['walk'].values())+np.array(pt_mode_time_count['vehicle'].values())
print sum
plt.plot(x, pt_mode_time_count['walk'].values(), label="walk")
plt.plot(x, pt_mode_time_count['vehicle'].values(), label="vehicle")
plt.plot(x, pt_mode_time_count['train'].values(),  label="train")
plt.plot(x, sum, label="sum")
plt.legend()
plt.grid(True)
filename = "C:/Users/PangYanbo/Desktop/UbiResult/image/TrainingSet1000personmode.png"
plt.savefig(filename)
plt.show()